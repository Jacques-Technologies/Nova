// services/documentService.js - RAG UNIFICADO Y MEJORADO
const { SearchClient, SearchIndexClient, AzureKeyCredential } = require('@azure/search-documents');
const OpenAI = require('openai');
require('dotenv').config();

class DocumentService {
    constructor() {
        if (DocumentService.instance) {
            return DocumentService.instance;
        }
        
        this.searchAvailable = false;
        this.openaiAvailable = false;
        this.initializationError = null;
        this.isAzureOpenAI = true;
        this.embeddingModel = null;
        this.vectorField = 'Embedding';
        this.openaiClient = null;

        console.log('üîç Inicializando Document Service...');
        this.initializeAzureSearch();
        this.initializeOpenAI();
        
        DocumentService.instance = this;
        console.log(`‚úÖ Document Service inicializado - Search: ${this.searchAvailable}, OpenAI: ${this.openaiAvailable}`);
    }

    // ... [M√©todos de inicializaci√≥n existentes - mantener iguales]
    initializeAzureSearch() {
        try {
            const endpoint = process.env.AZURE_SEARCH_ENDPOINT;
            const apiKey = process.env.AZURE_SEARCH_API_KEY;
            const indexName = 'nova';

            console.log('üîç Configuraci√≥n Azure Search:', {
                endpoint: endpoint ? `‚úÖ ${endpoint}` : '‚ùå Faltante',
                apiKey: apiKey ? '‚úÖ Configurado' : '‚ùå Faltante',
                indexName
            });

            if (!endpoint || !apiKey) {
                throw new Error('Variables de Azure Search faltantes (AZURE_SEARCH_ENDPOINT, AZURE_SEARCH_API_KEY)');
            }

            this.searchClient = new SearchClient(
                endpoint,
                indexName,
                new AzureKeyCredential(apiKey)
            );

            this.indexClient = new SearchIndexClient(
                endpoint,
                new AzureKeyCredential(apiKey)
            );
            
            this.indexName = indexName;
            this.searchAvailable = true;
            
            console.log(`‚úÖ Azure Search configurado correctamente`);
            this.testSearchConnection();
            
        } catch (error) {
            console.error('‚ùå Error inicializando Azure Search:', error.message);
            this.searchAvailable = false;
            this.initializationError = error.message;
        }
    }

    initializeOpenAI() {
        try {
            console.log('üîß [DocumentService] Inicializando Azure OpenAI para embeddings...');
            
            const azureOpenaiEndpoint = process.env.OPENAI_ENDPOINT;
            const azureOpenaiKey = process.env.OPENAI_API_KEY;
            
            if (!azureOpenaiEndpoint || !azureOpenaiKey) {
                throw new Error('Variables OPENAI_ENDPOINT y OPENAI_API_KEY requeridas para DocumentService');
            }

            const embeddingDeployment = 'text-embedding-3-large';
            const apiVersion = '2024-02-15-preview';
            const baseURL = `${azureOpenaiEndpoint}/openai/deployments/${embeddingDeployment}`;
            
            this.openaiClient = new OpenAI({
                apiKey: azureOpenaiKey,
                baseURL: baseURL,
                defaultQuery: { 'api-version': apiVersion },
                defaultHeaders: {
                    'api-key': azureOpenaiKey,
                    'Content-Type': 'application/json'
                },
                timeout: 30000
            });

            this.embeddingModel = embeddingDeployment;
            this.openaiAvailable = true;
            
            console.log('‚úÖ [DocumentService] Azure OpenAI configurado');
            this.testEmbeddingConnection();

        } catch (error) {
            console.error('‚ùå [DocumentService] Error inicializando Azure OpenAI:', error.message);
            this.openaiAvailable = false;
            this.initializationError = error.message;
        }
    }

    // ... [M√©todos de test y embedding existentes - mantener iguales]

    /**
     * ‚úÖ NUEVO: M√©todo principal UNIFICADO que retorna respuesta sintetizada
     * En lugar de formatear chunks por separado, genera una respuesta cohesiva
     */
    async buscarDocumentos(consulta, userId = 'unknown') {
        console.log(`üöÄ [${userId}] === B√öSQUEDA DOCUMENTOS UNIFICADA ===`);
        console.log(`üîç [${userId}] Consulta: "${consulta}"`);
        
        if (!this.searchAvailable) {
            const errorMsg = `‚ö†Ô∏è **Servicio de b√∫squeda no disponible**\n\n${this.initializationError || 'Azure Search no configurado'}`;
            return errorMsg;
        }

        try {
            // 1) Buscar documentos usando RAG mejorado
            const resultadosRaw = await this.buscarDocumentosRaw(consulta, userId, {
                k: 8,
                kNeighbors: 20,
                maxPerFile: 3
            });

            if (!resultadosRaw || resultadosRaw.length === 0) {
                console.log(`‚ùå [${userId}] No se encontraron documentos`);
                return this.sinResultados(consulta, userId);
            }

            // 2) ‚úÖ NUEVA FUNCI√ìN: Sintetizar respuesta unificada
            const respuestaUnificada = await this.sintetizarRespuesta(consulta, resultadosRaw, userId);
            
            console.log(`‚úÖ [${userId}] Respuesta unificada generada (${respuestaUnificada.length} chars)`);
            return respuestaUnificada;

        } catch (error) {
            console.error(`‚ùå [${userId}] Error en b√∫squeda:`, error.message);
            return `‚ùå **Error en b√∫squeda de documentos**: ${error.message}`;
        }
    }

    /**
     * ‚úÖ NUEVA FUNCI√ìN: Sintetizar respuesta unificada usando OpenAI
     * Combina m√∫ltiples chunks en una respuesta coherente y concisa
     */
    async sintetizarRespuesta(consulta, resultadosRaw, userId) {
        console.log(`üß† [${userId}] Sintetizando respuesta con ${resultadosRaw.length} documentos...`);

        // Si no hay OpenAI disponible, usar m√©todo fallback
        if (!this.openaiAvailable) {
            return this.sintetizarRespuestaFallback(consulta, resultadosRaw, userId);
        }

        try {
            // Construir contexto optimizado
            const contexto = this.construirContextoOptimizado(resultadosRaw);
            
            const systemPrompt = `Eres NOVA-AI, asistente especializado en documentaci√≥n t√©cnica de Nova Corporation.

INSTRUCCIONES CR√çTICAS:
1. Responde SIEMPRE en espa√±ol
2. Basa tu respuesta √öNICAMENTE en los documentos proporcionados
3. Sintetiza la informaci√≥n en una respuesta UNIFICADA y CONCISA
4. NO repitas informaci√≥n, COMB√çNALA inteligentemente
5. Estructura la respuesta con markdown para f√°cil lectura
6. Si hay endpoints o APIs, presenta una lista organizada
7. Si hay procedimientos, expl√≠calos paso a paso
8. Cita las fuentes al final de forma resumida

FORMATO DE RESPUESTA:
- Respuesta directa a la pregunta
- Informaci√≥n organizada y estructurada
- Fuentes consultadas al final`;

            const userPrompt = `**PREGUNTA DEL USUARIO:**
${consulta}

**DOCUMENTOS ENCONTRADOS:**
${contexto}

**TAREA:**
Proporciona una respuesta UNIFICADA que sintetice toda la informaci√≥n relevante de los documentos para responder la pregunta. No presentes los documentos por separado, sino combina la informaci√≥n en una sola respuesta coherente.`;

            const response = await this.openaiClient.chat.completions.create({
                model: 'gpt-5-mini', // Usar el modelo configurado
                messages: [
                    { role: 'system', content: systemPrompt },
                    { role: 'user', content: userPrompt }
                ],
                temperature: 0.3, // Baja temperatura para respuestas m√°s precisas
                max_tokens: 2000,
                top_p: 0.9
            });

            let respuestaSintetizada = response.choices?.[0]?.message?.content?.trim();
            
            if (!respuestaSintetizada || respuestaSintetizada.length < 50) {
                console.warn(`‚ö†Ô∏è [${userId}] Respuesta de OpenAI muy corta, usando fallback`);
                return this.sintetizarRespuestaFallback(consulta, resultadosRaw, userId);
            }

            // Agregar metadatos de fuentes
            const fuentes = [...new Set(resultadosRaw.map(r => r.fileName).filter(Boolean))];
            const carpetas = [...new Set(resultadosRaw.map(r => r.folder).filter(Boolean))];
            
            respuestaSintetizada += `\n\n---\n\n`;
            respuestaSintetizada += `üìö **Fuentes**: ${fuentes.slice(0, 3).join(', ')}${fuentes.length > 3 ? ` y ${fuentes.length - 3} m√°s` : ''}`;
            if (carpetas.length) respuestaSintetizada += `\nüìÅ **Carpetas**: ${carpetas.join(', ')}`;
            respuestaSintetizada += `\nü§ñ **Procesado con**: Azure AI Search + OpenAI`;

            console.log(`‚úÖ [${userId}] S√≠ntesis completada exitosamente`);
            return respuestaSintetizada;

        } catch (error) {
            console.error(`‚ùå [${userId}] Error en s√≠ntesis OpenAI:`, error.message);
            return this.sintetizarRespuestaFallback(consulta, resultadosRaw, userId);
        }
    }

    /**
     * ‚úÖ Construir contexto optimizado para OpenAI
     * Limita el tama√±o y mejora la estructura
     */
    construirContextoOptimizado(resultadosRaw) {
        if (!Array.isArray(resultadosRaw) || resultadosRaw.length === 0) return '';

        let contexto = '';
        const maxContextLength = 8000; // L√≠mite de caracteres para el contexto
        let currentLength = 0;

        resultadosRaw.forEach((doc, index) => {
            if (currentLength >= maxContextLength) return;

            const header = `DOCUMENTO ${index + 1} (${doc.fileName || 'sin-nombre'}):`;
            const content = doc.chunk || '';
            
            // Truncar el contenido si es muy largo
            const maxChunkLength = Math.min(1500, maxContextLength - currentLength - header.length);
            const truncatedContent = content.length > maxChunkLength 
                ? content.substring(0, maxChunkLength) + '...[truncado]'
                : content;

            const docSection = `${header}\n${truncatedContent}\n\n`;
            
            if (currentLength + docSection.length <= maxContextLength) {
                contexto += docSection;
                currentLength += docSection.length;
            }
        });

        return contexto;
    }

    /**
     * ‚úÖ M√©todo fallback cuando OpenAI no est√° disponible
     * Crea una respuesta estructurada sin IA
     */
    sintetizarRespuestaFallback(consulta, resultadosRaw, userId) {
        console.log(`üîÑ [${userId}] Usando s√≠ntesis fallback (sin OpenAI)`);

        let respuesta = `üîç **Informaci√≥n encontrada para: "${consulta}"**\n\n`;

        // Agrupar por archivo para evitar repetici√≥n
        const porArchivo = new Map();
        resultadosRaw.forEach(doc => {
            const fileName = doc.fileName || 'Documento sin nombre';
            if (!porArchivo.has(fileName)) {
                porArchivo.set(fileName, []);
            }
            porArchivo.get(fileName).push(doc.chunk || '');
        });

        // Combinar informaci√≥n por archivo
        let archivoIndex = 1;
        for (const [fileName, chunks] of porArchivo) {
            if (archivoIndex <= 3) { // Limitar a 3 archivos principales
                respuesta += `### üìÑ ${fileName}\n\n`;
                
                // Combinar chunks del mismo archivo
                const textoCompleto = chunks.join(' ').trim();
                const resumen = textoCompleto.length > 800 
                    ? textoCompleto.substring(0, 800) + '...'
                    : textoCompleto;
                
                respuesta += `${resumen}\n\n`;
                archivoIndex++;
            }
        }

        // Metadatos
        const totalArchivos = porArchivo.size;
        const totalChunks = resultadosRaw.length;
        
        respuesta += `---\n\n`;
        respuesta += `üìä **Resumen**: ${totalChunks} secciones de ${totalArchivos} documento(s)`;
        respuesta += `\nü§ñ **B√∫squeda**: Azure AI Search`;

        return respuesta;
    }

    /**
     * ‚úÖ MEJORADO: buscarDocumentosRaw con mejor filtrado
     */
    async buscarDocumentosRaw(consulta, userId = 'unknown', options = {}) {
        console.log(`üöÄ [${userId}] === B√öSQUEDA RAW MEJORADA ===`);
        
        if (!this.searchAvailable) {
            throw new Error(this.initializationError || 'Azure Search no configurado');
        }

        const {
            k = 6,
            kNeighbors = 20,
            select = ['Chunk', 'FileName', 'Folder'],
            maxPerFile = 2
        } = options;

        const consultaSanitizada = this.sanitizeQuery(consulta);
        let resultados = [];
        
        // Estrategia 1: B√∫squeda vectorial si est√° disponible
        if (this.openaiAvailable) {
            try {
                const vector = await this.createEmbedding(consulta);
                
                const vectorResults = await this.searchClient.search("*", {
                    vectorQueries: [{
                        kNearestNeighborsCount: kNeighbors,
                        fields: this.vectorField,
                        vector
                    }],
                    select,
                    top: k * 3,
                    includeTotalCount: true
                });
                
                resultados = await this.procesarResultadosRAG(vectorResults, k, maxPerFile, userId);
                
                if (resultados.length > 0) {
                    console.log(`‚úÖ [${userId}] B√∫squeda vectorial exitosa: ${resultados.length} docs`);
                    return resultados;
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è [${userId}] B√∫squeda vectorial fall√≥: ${error.message}`);
            }
        }

        // Estrategia 2: B√∫squeda textual
        try {
            const textResults = await this.searchClient.search(consultaSanitizada, {
                select,
                top: k * 4,
                searchMode: 'any',
                queryType: 'simple',
                includeTotalCount: true
            });
            
            resultados = await this.procesarResultadosRAG(textResults, k, maxPerFile, userId);
            console.log(`‚úÖ [${userId}] B√∫squeda textual: ${resultados.length} docs`);
            
        } catch (error) {
            console.error(`‚ùå [${userId}] Error en b√∫squeda textual:`, error.message);
            throw error;
        }

        return resultados;
    }

    /**
     * ‚úÖ Procesador mejorado de resultados RAG
     */
    async procesarResultadosRAG(searchResults, k, maxPerFile, userId) {
        const resultados = [];
        const porArchivo = new Map();
        let procesados = 0;
        
        try {
            for await (const result of searchResults.results) {
                procesados++;
                
                const doc = result.document || {};
                const score = result.score || 0;
                const fileName = doc.FileName || '(sin nombre)';
                const chunk = (doc.Chunk || '').trim();
                
                // Filtros de calidad
                if (!chunk || chunk.length < 20) continue;
                if (score > 0 && score < 0.5) continue; // Filtrar scores muy bajos
                
                // Control por archivo
                const count = porArchivo.get(fileName) || 0;
                if (count >= maxPerFile) continue;
                porArchivo.set(fileName, count + 1);
                
                resultados.push({
                    fileName,
                    folder: doc.Folder || '',
                    chunk,
                    score,
                    quality: this.evaluarCalidadChunk(chunk, score)
                });
                
                if (resultados.length >= k) break;
            }
            
            // Ordenar por calidad y score
            resultados.sort((a, b) => (b.quality + b.score) - (a.quality + a.score));
            
            console.log(`üìä [${userId}] Procesados: ${procesados}, seleccionados: ${resultados.length}`);
            return resultados;
            
        } catch (error) {
            console.error(`‚ùå [${userId}] Error procesando resultados:`, error.message);
            return [];
        }
    }

    /**
     * ‚úÖ Evaluar calidad de un chunk
     */
    evaluarCalidadChunk(chunk, score) {
        let quality = 0;
        
        // Longitud apropiada
        if (chunk.length >= 100 && chunk.length <= 2000) quality += 0.3;
        
        // Contiene informaci√≥n estructurada
        if (chunk.includes(':') || chunk.includes('‚Ä¢') || chunk.includes('-')) quality += 0.2;
        
        // No es solo metadata
        if (!chunk.toLowerCase().includes('confidencial') && 
            !chunk.toLowerCase().includes('p√°gina') &&
            !chunk.toLowerCase().includes('page')) quality += 0.2;
        
        // Contiene informaci√≥n t√©cnica √∫til
        if (chunk.includes('api') || chunk.includes('endpoint') || 
            chunk.includes('m√©todo') || chunk.includes('par√°metro')) quality += 0.3;
            
        return Math.min(quality, 1.0);
    }

    /**
     * ‚úÖ Mantener m√©todos existentes necesarios
     */
    sanitizeQuery(query) {
        if (!query || typeof query !== 'string') {
            return '*';
        }

        let sanitized = query
            .replace(/[+\-&|!(){}[\]^"~*?:\\]/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();

        if (!sanitized) return '*';

        const words = sanitized.split(' ').filter(word => word.length > 0);
        const cleanWords = words.map(word => {
            word = word.replace(/^[^a-zA-Z0-9√°√©√≠√≥√∫√±√º]+|[^a-zA-Z0-9√°√©√≠√≥√∫√±√º]+$/g, '');
            return word.length < 2 ? null : word;
        }).filter(Boolean);

        if (cleanWords.length === 0) return '*';
        
        const finalQuery = cleanWords.join(' ');
        console.log(`üßπ Query sanitizada: "${query}" ‚Üí "${finalQuery}"`);
        return finalQuery;
    }

    async createEmbedding(text) {
        if (!this.openaiAvailable) {
            throw new Error('Servicio de embeddings no disponible');
        }

        try {
            const cleanText = text.trim();
            if (!cleanText) {
                throw new Error('Texto vac√≠o para embedding');
            }

            const result = await this.openaiClient.embeddings.create({
                input: cleanText
            });
            
            if (!result?.data?.[0]?.embedding) {
                throw new Error('No se recibi√≥ embedding v√°lido');
            }
            
            return result.data[0].embedding;
                
        } catch (error) {
            console.error('‚ùå Error creando embedding:', error.message);
            throw error;
        }
    }

    sinResultados(consulta, userId) {
        return `üîç **B√∫squeda: "${consulta}"**\n\n` +
               `‚ùå No se encontraron documentos relevantes en el √≠ndice.\n\n` +
               `üí° **Sugerencias:**\n` +
               `‚Ä¢ Intenta con t√©rminos m√°s generales\n` +
               `‚Ä¢ Verifica la ortograf√≠a\n` +
               `‚Ä¢ Usa sin√≥nimos o palabras relacionadas\n\n` +
               `üìä **√çndice consultado:** ${this.indexName}\n` +
               `üîß **Tipo de b√∫squeda:** ${this.openaiAvailable ? 'H√≠brida (Vector + Texto)' : 'Solo texto'}`;
    }

    // M√©todos de utilidad existentes
    isAvailable() {
        return this.searchAvailable;
    }

    getConfigInfo() {
        return {
            searchAvailable: this.searchAvailable,
            openaiAvailable: this.openaiAvailable,
            indexName: this.indexName || 'No configurado',
            vectorField: this.vectorField || 'No configurado',
            embeddingModel: this.embeddingModel || 'No configurado',
            error: this.initializationError,
            features: {
                vectorSearch: this.searchAvailable && this.openaiAvailable,
                textSearch: this.searchAvailable,
                unifiedResponse: true,
                aiSynthesis: this.openaiAvailable
            }
        };
    }
}

// Crear instancia singleton
const documentService = new DocumentService();
module.exports = documentService;