const { OpenAI } = require('openai');
const { DefaultAzureCredential } = require('@azure/identity');
const { DateTime } = require('luxon');
const axios = require('axios');
const cosmosService = require('./cosmosService');
const documentService = require('./documentService'); // ‚úÖ NUEVA INTEGRACI√ìN
require('dotenv').config();

/**
 * Servicio Azure OpenAI MEJORADO con b√∫squeda autom√°tica de documentos
 * - Integraci√≥n completa con Azure OpenAI Service
 * - B√∫squeda autom√°tica de documentos para preguntas t√©cnicas
 * - Mantiene compatibilidad con historial tradicional
 * - Aprovecha formato de conversaci√≥n cuando est√° disponible
 * - Guardado autom√°tico en formato OpenAI
 * - Consulta de saldos Nova
 */
class AzureOpenAIService {
    constructor() {
        this.initialized = false;
        this.initializationError = null;
        
        console.log('üöÄ Inicializando Azure OpenAI Service con b√∫squeda autom√°tica de documentos...');
        this.diagnoseConfiguration();
        this.initializeAzureOpenAI();
        this.tools = this.defineTools();
        
        console.log(`‚úÖ Azure OpenAI Service inicializado - Disponible: ${this.openaiAvailable}`);
        console.log(`üîó Formato de conversaci√≥n: ${cosmosService.isAvailable() ? 'Disponible' : 'No disponible'}`);
        console.log(`üìö Document Search: ${documentService.isAvailable() ? 'Disponible' : 'No disponible'}`);
    }

    /**
     * ‚úÖ Diagn√≥stico de configuraci√≥n Azure OpenAI
     */
    diagnoseConfiguration() {
        console.log('üîç Diagnosticando configuraci√≥n Azure OpenAI...');
        
        const config = {
            apiKey: process.env.OPENAI_API_KEY,
            endpoint: process.env.OPENAI_ENDPOINT,
            region: 'eastus2', 
            deploymentName: 'gpt-5-mini',
            apiVersion: '2024-12-01-preview'
        };

        console.log('üìä Estado de configuraci√≥n Azure:');
        console.log(`   API Key: ${config.apiKey ? '‚úÖ Configurada' : '‚ùå Faltante'}`);
        console.log(`   Endpoint: ${config.endpoint ? '‚úÖ Configurado' : '‚ùå Faltante'}`);
        console.log(`   Region: ${config.region ? '‚úÖ Configurada' : '‚ö†Ô∏è Opcional'}`);
        console.log(`   API Version: ${config.apiVersion}`);
        console.log(`   Deployment: ${config.deploymentName}`);
        
        if (config.apiKey) {
            console.log(`   Key Preview: ${config.apiKey.substring(0, 10)}...${config.apiKey.slice(-4)}`);
        }
        if (config.endpoint) {
            console.log(`   Endpoint: ${config.endpoint}`);
        }

        this.config = config;
    }

    /**
     * ‚úÖ Inicializaci√≥n del cliente Azure OpenAI
     */
    initializeAzureOpenAI() {
        try {
            const { apiKey, endpoint, apiVersion, deploymentName } = this.config;
            
            if (!apiKey) {
                this.initializationError = 'AZURE_OPENAI_API_KEY no est√° configurada en las variables de entorno';
                console.error('‚ùå Azure OpenAI Error:', this.initializationError);
                this.openaiAvailable = false;
                return;
            }

            if (!endpoint) {
                this.initializationError = 'AZURE_OPENAI_ENDPOINT no est√° configurado en las variables de entorno';
                console.error('‚ùå Azure OpenAI Error:', this.initializationError);
                this.openaiAvailable = false;
                return;
            }

            // Validar formato del endpoint
            if (!endpoint.includes('openai.azure.com')) {
                console.warn('‚ö†Ô∏è El endpoint no parece ser de Azure OpenAI');
            }
            
            console.log('üîë Configurando cliente Azure OpenAI...');
            
            // Configuraci√≥n espec√≠fica para Azure OpenAI
            this.openai = new OpenAI({
                apiKey: apiKey,
                baseURL: `${endpoint}/openai/deployments/${deploymentName}`,
                defaultQuery: { 'api-version': apiVersion },
                defaultHeaders: {
                    'Content-Type': 'application/json',
                    'api-key': apiKey
                },
                timeout: 45000, // 45 segundos para respuestas complejas
                maxRetries: 3   // 3 reintentos
            });

            // Guardar informaci√≥n de deployment
            this.deploymentName = deploymentName;
            this.apiVersion = apiVersion;
            
            this.openaiAvailable = true;
            this.initialized = true;
            
            console.log('‚úÖ Cliente Azure OpenAI configurado exitosamente');
            console.log(`üéØ Deployment: ${deploymentName}`);
            console.log(`üìÖ API Version: ${apiVersion}`);
            
            // Test b√°sico de conectividad (opcional)
            if (process.env.NODE_ENV !== 'production') {
                this.testConnection();
            }
            
        } catch (error) {
            this.initializationError = `Error inicializando Azure OpenAI: ${error.message}`;
            console.error('‚ùå Error inicializando Azure OpenAI:', error);
            this.openaiAvailable = false;
        }
    }
    
    /**
     * ‚úÖ Test de conectividad b√°sico con Azure OpenAI
     */
    async testConnection() {
        try {
            console.log('üß™ Probando conectividad con Azure OpenAI...');
            
            const testResponse = await this.openai.chat.completions.create({
                model: this.deploymentName, // Usar deployment name en lugar de model
                messages: [{ role: "user", content: "Test" }],
                max_completion_tokens: 5,
                temperature: 0
            });
            
            if (testResponse?.choices?.length > 0) {
                console.log('‚úÖ Test de conectividad Azure OpenAI exitoso');
                return { 
                    success: true, 
                    model: this.deploymentName,
                    usage: testResponse.usage 
                };
            } else {
                console.warn('‚ö†Ô∏è Respuesta de test inv√°lida');
                return { success: false, error: 'Respuesta inv√°lida' };
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Test de conectividad fall√≥:', error.message);
            
            // An√°lisis espec√≠fico de errores de Azure
            if (error.message.includes('DeploymentNotFound')) {
                console.error(`‚ùå Deployment "${this.deploymentName}" no encontrado`);
            } else if (error.message.includes('InvalidApiVersion')) {
                console.error(`‚ùå API Version "${this.apiVersion}" inv√°lida`);
            } else if (error.message.includes('Unauthorized')) {
                console.error('‚ùå API Key inv√°lida o sin permisos');
            }
            
            return { success: false, error: error.message };
        }
    }

    /**
     * ‚úÖ NUEVA HERRAMIENTA: Buscar en documentos
     */
    defineTools() {
        const tools = [
            {
                type: "function",
                function: {
                    name: "buscar_documentos_nova",
                    description: "Busca informaci√≥n espec√≠fica en los documentos internos de Nova, incluyendo documentaci√≥n de APIs, procedimientos, pol√≠ticas y gu√≠as t√©cnicas.",
                    parameters: {
                        type: "object",
                        properties: {
                            consulta: {
                                type: "string",
                                description: "T√©rmino o frase a buscar en los documentos internos"
                            },
                            tipo_busqueda: {
                                type: "string",
                                enum: ["general", "politicas", "api", "procedimientos", "tecnica"],
                                description: "Tipo espec√≠fico de b√∫squeda a realizar",
                                default: "general"
                            }
                        },
                        required: ["consulta"]
                    }
                }
            },
            {
                type: "function",
                function: {
                    name: "obtener_fecha_hora_actual",
                    description: "Obtiene la fecha y hora actual en zona horaria de M√©xico",
                    parameters: { 
                        type: "object", 
                        properties: {
                            formato: {
                                type: "string",
                                enum: ["completo", "fecha", "hora", "timestamp"],
                                description: "Formato de la fecha/hora a devolver"
                            }
                        }
                    }
                }
            },
            {
                type: "function",
                function: {
                    name: "obtener_informacion_usuario",
                    description: "Obtiene informaci√≥n completa del usuario autenticado",
                    parameters: { 
                        type: "object", 
                        properties: {
                            incluir_token: {
                                type: "boolean",
                                description: "Si incluir informaci√≥n del token (solo preview)"
                            }
                        }
                    }
                }
            },
            {
                type: "function",
                function: {
                    name: "consultar_tasas_interes",
                    description: "Consulta las tasas de inter√©s de Nova para un a√±o espec√≠fico. Muestra tasas vista, fijo (1,3,6 meses), FAP, Nov y Pr√©stamos por mes.",
                    parameters: {
                        type: "object",
                        properties: {
                            anio: {
                                type: "integer",
                                description: "A√±o para consultar las tasas (ej: 2025)",
                                minimum: 2020,
                                maximum: 2030
                            }
                        },
                        required: ["anio"]
                    }
                }
            },
            {
                type: "function",
                function: {
                    name: "consultar_saldo_usuario",
                    description: "Consulta el saldo actual del usuario en Nova. Muestra saldo disponible, retenido y total por tipo de cuenta.",
                    parameters: {
                        type: "object",
                        properties: {
                            tipo_sistema: {
                                type: "string",
                                description: "Tipo de sistema a consultar (opcional, se puede dejar vac√≠o para consultar todos)",
                                default: ""
                            },
                            incluir_detalles: {
                                type: "boolean",
                                description: "Si incluir detalles adicionales del saldo",
                                default: true
                            }
                        }
                    }
                }
            },
            {
                type: "function",
                function: {
                    name: "generar_resumen_conversacion",
                    description: "Genera un resumen inteligente de la conversaci√≥n usando el historial en formato OpenAI cuando est√© disponible",
                    parameters: { 
                        type: "object", 
                        properties: {
                            incluir_estadisticas: {
                                type: "boolean",
                                description: "Si incluir estad√≠sticas detalladas"
                            },
                            usar_formato_openai: {
                                type: "boolean",
                                description: "Si usar el formato de conversaci√≥n OpenAI para mejor an√°lisis"
                            }
                        }
                    }
                }
            },
            {
                type: "function",
                function: {
                    name: "consultar_api_nova",
                    description: "Realiza consultas a APIs de Nova usando el token del usuario",
                    parameters: {
                        type: "object",
                        properties: {
                            endpoint: {
                                type: "string",
                                description: "Endpoint de la API a consultar"
                            },
                            metodo: {
                                type: "string",
                                enum: ["GET", "POST"],
                                description: "M√©todo HTTP a usar"
                            },
                            parametros: {
                                type: "object",
                                description: "Par√°metros adicionales para la consulta"
                            }
                        },
                        required: ["endpoint"]
                    }
                }
            },
            {
                type: "function",
                function: {
                    name: "analizar_conversacion_openai",
                    description: "Analiza la conversaci√≥n completa usando el formato OpenAI para obtener insights detallados",
                    parameters: {
                        type: "object",
                        properties: {
                            tipo_analisis: {
                                type: "string",
                                enum: ["resumen", "sentimientos", "temas", "patrones", "recomendaciones"],
                                description: "Tipo de an√°lisis a realizar"
                            },
                            incluir_sistema: {
                                type: "boolean",
                                description: "Si incluir el mensaje del sistema en el an√°lisis"
                            }
                        },
                        required: ["tipo_analisis"]
                    }
                }
            }
        ];

        console.log(`üõ†Ô∏è ${tools.length} herramientas definidas para Azure OpenAI (incluyendo b√∫squeda de documentos)`);
        return tools;
    }


    /**
     * ‚úÖ M√âTODO PRINCIPAL MEJORADO: Procesar mensaje con b√∫squeda autom√°tica de documentos
     */
// üîΩ Dentro de class AzureOpenAIService
// üëá Pega esto DENTRO de class AzureOpenAIService (mismo nivel que procesarMensaje)
async generarRespuestaConDocumentos(pregunta, resultadosRaw, userInfo) {
    const userId = userInfo?.usuario || 'unknown';

    // 1) Construir contexto: usa el helper del documentService si existe; si no, fallback local
    let contexto = '';
    if (documentService && typeof documentService.construirContextoRAG === 'function') {
        contexto = documentService.construirContextoRAG(resultadosRaw);
    } else {
        const piezas = (resultadosRaw || []).map((r, i) => {
            const header = `[[DOC ${i+1} ‚Äî ${r.fileName}${r.folder ? ' | ' + r.folder : ''}]]`;
            const body = (r.chunk || '').slice(0, 1600);
            return `${header}\n${body}`;
        });
        contexto = piezas.join('\n\n---\n\n');
    }

    // 2) Prompts (s√≠ntesis corta y concreta)
    const systemPrompt = `
Eres un asistente corporativo. Responde con UNA sola respuesta breve, directa y accionable
(5‚Äì10 l√≠neas m√°ximo), basada EXCLUSIVAMENTE en el contexto entre [[DOC ‚Ä¶]].
Si algo no aparece en los docs, dilo expl√≠citamente: **Esta informaci√≥n no proviene de los documentos internos de Nova**.
Cuando corresponda, referencia el documento as√≠: (Ver: NombreDeArchivo.ext).
No hagas listas interminables ni pegues texto literal, sintetiza.
    `.trim();

    const userPrompt = `
[PREGUNTA]
${pregunta}

[CONTEXTOS]
${contexto}
    `.trim();

    // 3) Llamada al deployment de Azure OpenAI (usa your this.deploymentName = 'gpt-5-mini')
    const completion = await this.openai.chat.completions.create({
        model: this.deploymentName,   // ‚Üê debe ser el deployment name real en Azure (p.ej. 'gpt-5-mini')
        messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
        ],
        temperature: 1.0,
        max_completion_tokens: 600
    });

    let answer = completion.choices?.[0]?.message?.content?.trim() || '';

    // 4) Ap√©ndice corto de fuentes (opcional)
    const fuentes = [...new Set((resultadosRaw || []).map(r => r.fileName))].slice(0, 3);
    if (fuentes.length) {
        answer += `\n\nüîé Fuentes: ${fuentes.join(', ')}`;
    }
    return answer;
}

async procesarMensaje(mensaje, historial = [], userToken = null, userInfo = null, conversationId = null) {
    try {
        if (!this.openaiAvailable) return this.createUnavailableResponse();
        if (!this.initialized) {
            this.initializeAzureOpenAI();
            if (!this.openaiAvailable) return this.createUnavailableResponse();
        }

        const userId = userInfo?.usuario || 'unknown';
        console.log(`üìù [${userId}] Procesando: "${(mensaje||'').slice(0,80)}..."`);

        // 1) ¬øSe requiere b√∫squeda?
        let resultadosRAG = null;
        if (this.needsDocumentSearch(mensaje) && documentService.isAvailable()) {
            try {
                resultadosRAG = await documentService.buscarDocumentosRaw(mensaje, userId, {
                    k: 6, kNeighbors: 15, maxPerFile: 2
                });
            } catch (e) {
                console.warn('‚ö†Ô∏è B√∫squeda RAW fall√≥, sigo sin RAG:', e.message);
            }
        }

        // 2) Si hay RAG ‚Üí s√≠ntesis con gpt-5-mini (respuesta √∫nica)
        if (Array.isArray(resultadosRAG) && resultadosRAG.length > 0) {
            console.log(`üìö [${userId}] Usando RAG con ${resultadosRAG.length} chunks`);
            const respuestaConcreta = await this.generarRespuestaConDocumentos(
                mensaje,
                resultadosRAG,
                userInfo
            );

            // Adjunta metadata y retorna
            return {
                type: 'text',
                content: respuestaConcreta,
                metadata: {
                    formatUsed: 'rag-synthesis',
                    modelUsed: this.deploymentName,
                    azureDeployment: this.deploymentName,
                    apiVersion: this.apiVersion,
                    docChunks: resultadosRAG.map(r => ({ fileName: r.fileName, folder: r.folder })),
                    documentSearchUsed: true
                }
            };
        }

        // 3) SIN RAG ‚Üí tu flujo tradicional (conversaci√≥n/historial)
        let mensajesParaIA = [];
        let usingOpenAIFormat = false;

        if (cosmosService.isAvailable() && conversationId) {
            try {
                const openaiConversation = await cosmosService.getConversationForOpenAI(
                    conversationId, userId, true
                );
                if (openaiConversation?.length) {
                    mensajesParaIA = [...openaiConversation];
                    usingOpenAIFormat = true;
                }
            } catch {
                /* fallback abajo */
            }
        }

        if (!usingOpenAIFormat) {
            mensajesParaIA = this.formatearHistorialTradicional(historial, userInfo, '');
        }
        mensajesParaIA.push({ role: 'user', content: mensaje });

        const requestConfig = {
            model: this.deploymentName,                 // ‚úÖ usa tu deployment
            messages: mensajesParaIA,
            temperature: this.calculateTemperature(mensaje),
            max_completion_tokens: this.calculateMaxTokens(mensaje)
        };
        if (this.shouldUseTools(mensaje)) {
            requestConfig.tools = this.tools;
            requestConfig.tool_choice = 'auto';
        }

        const response = await this.openai.chat.completions.create(requestConfig);
        const messageResponse = response.choices?.[0]?.message;
        if (!messageResponse) throw new Error('Respuesta vac√≠a de Azure OpenAI');

        if (messageResponse.tool_calls) {
            const finalResponse = await this.procesarHerramientas(
                messageResponse, mensajesParaIA, userToken, userInfo, conversationId
            );
            finalResponse.metadata = {
                formatUsed: usingOpenAIFormat ? 'openai-conversation' : 'traditional-history',
                modelUsed: requestConfig.model,
                toolsUsed: true,
                documentSearchUsed: false,
                azureDeployment: this.deploymentName,
                apiVersion: this.apiVersion,
                usage: response.usage
            };
            return finalResponse;
        } else {
            return {
                type: 'text',
                content: messageResponse.content || 'Respuesta vac√≠a de Azure OpenAI',
                metadata: {
                    formatUsed: usingOpenAIFormat ? 'openai-conversation' : 'traditional-history',
                    modelUsed: requestConfig.model,
                    toolsUsed: false,
                    documentSearchUsed: false,
                    azureDeployment: this.deploymentName,
                    apiVersion: this.apiVersion,
                    usage: response.usage
                }
            };
        }

    } catch (error) {
        console.error('‚ùå Error en procesarMensaje:', error);
        return this.manejarErrorOpenAI(error, userInfo);
    }
}


    /**
     * ‚úÖ NUEVA FUNCI√ìN: Detectar si se necesita b√∫squeda de documentos
     */
    needsDocumentSearch(mensaje) {
        const mensajeLower = mensaje.toLowerCase();
        
        // Palabras clave que indican necesidad de buscar en documentos
        const documentKeywords = [
            // APIs y endpoints
            'endpoint', 'api', 'rest', 'validasocio', 'valida socio', 'validar socio',
            'autenticacion', 'autenticaci√≥n', 'login', 'inicio sesion', 'inicio de sesi√≥n',
            
            // Versiones y documentaci√≥n t√©cnica
            'version', 'versi√≥n', 'v1.1', 'v1.0', 'documentacion', 'documentaci√≥n',
            'especificacion', 'especificaci√≥n',
            
            // Procedimientos y pol√≠ticas
            'procedimiento', 'proceso', 'pol√≠tica', 'politica', 'lineamiento',
            'norma', 'regla', 'protocolo', 'gu√≠a', 'guia', 'manual',
            
            // Validaciones y controles
            'validacion', 'validaci√≥n', 'control', 'verificacion', 'verificaci√≥n',
            'requisito', 'campo', 'parametro', 'par√°metro',
            
            // Preguntas sobre prop√≥sito/funcionamiento
            'proposito', 'prop√≥sito', 'para que sirve', 'para qu√© sirve',
            'como funciona', 'c√≥mo funciona', 'que hace', 'qu√© hace',
            
            // Referencias espec√≠ficas a documentaci√≥n
            'documento', 'archivo', 'referencia', 'informaci√≥n t√©cnica',
            'especificaciones t√©cnicas'
        ];
        
        const needsSearch = documentKeywords.some(keyword => mensajeLower.includes(keyword));
        
        if (needsSearch) {
            console.log(`üìö B√∫squeda de documentos requerida para: "${mensaje.substring(0, 50)}..."`);
            console.log(`   Palabras clave detectadas: ${documentKeywords.filter(k => mensajeLower.includes(k)).join(', ')}`);
        }
        
        return needsSearch;
    }

    /**
     * ‚úÖ NUEVA FUNCI√ìN: Buscar documentos autom√°ticamente
     */
    async buscarDocumentosAutomaticamente(mensaje, userId) {
        try {
            if (!documentService.isAvailable()) {
                console.log(`‚ö†Ô∏è [${userId}] Document Service no disponible para b√∫squeda autom√°tica`);
                return '';
            }

            console.log(`üîç [${userId}] Ejecutando b√∫squeda autom√°tica de documentos...`);
            
            // Extraer t√©rminos de b√∫squeda m√°s espec√≠ficos del mensaje
            const terminosBusqueda = this.extraerTerminosBusqueda(mensaje);
            console.log(`üéØ [${userId}] T√©rminos de b√∫squeda extra√≠dos: "${terminosBusqueda}"`);
            
            const resultado = await documentService.buscarDocumentos(terminosBusqueda, userId);
            
            if (resultado && !resultado.includes('No se encontraron documentos')) {
                console.log(`‚úÖ [${userId}] Documentos encontrados autom√°ticamente`);
                return resultado;
            } else {
                console.log(`‚ö†Ô∏è [${userId}] No se encontraron documentos relevantes en b√∫squeda autom√°tica`);
                return '';
            }
            
        } catch (error) {
            console.error(`‚ùå [${userId}] Error en b√∫squeda autom√°tica de documentos:`, error);
            return '';
        }
    }

    /**
     * ‚úÖ NUEVA FUNCI√ìN: Extraer t√©rminos de b√∫squeda optimizados
     */
    extraerTerminosBusqueda(mensaje) {
        const mensajeLower = mensaje.toLowerCase();
        
        // Mapeo de t√©rminos para mejorar la b√∫squeda
        const terminosMap = {
            'validasocio': 'validaSocio Auth validar socio autenticaci√≥n',
            'valida socio': 'validaSocio Auth validar socio autenticaci√≥n',
            'validar socio': 'validaSocio Auth validar socio autenticaci√≥n',
            'endpoint': 'endpoint API REST servicio',
            'autenticacion': 'autenticaci√≥n Auth login validaci√≥n',
            'autenticaci√≥n': 'autenticaci√≥n Auth login validaci√≥n',
            'inicio sesion': 'inicio sesi√≥n login Auth validaci√≥n',
            'inicio de sesi√≥n': 'inicio sesi√≥n login Auth validaci√≥n',
            'v1.1': 'versi√≥n 1.1 API REST',
            'version 1.1': 'versi√≥n 1.1 API REST',
            'versi√≥n 1.1': 'versi√≥n 1.1 API REST'
        };
        
        // Buscar t√©rminos espec√≠ficos y expandirlos
        for (const [termino, expansion] of Object.entries(terminosMap)) {
            if (mensajeLower.includes(termino)) {
                console.log(`üéØ T√©rmino espec√≠fico detectado: "${termino}" ‚Üí "${expansion}"`);
                return expansion;
            }
        }
        
        // Si no hay t√©rminos espec√≠ficos, extraer palabras clave importantes
        const palabrasImportantes = mensaje.match(/\b\w{4,}\b/g) || [];
        const terminosRelevantes = palabrasImportantes
            .filter(palabra => !['cu√°l', 'cual', 'prop√≥sito', 'proposito', 'para', 'antes', 'permite', 'permite'].includes(palabra.toLowerCase()))
            .slice(0, 3) // M√°ximo 3 t√©rminos
            .join(' ');
            
        return terminosRelevantes || mensaje;
    }

    /**
     * ‚úÖ NUEVO: Formatear historial tradicional con contexto de documentos
     */
    formatearHistorialTradicional(historial, userInfo, documentContext = '') {
        const fechaActual = DateTime.now().setZone('America/Mexico_City');
        
        const userContext = userInfo ? 
            `Usuario autenticado: ${userInfo.nombre} (${userInfo.usuario})` : 
            'Usuario no autenticado';

        let systemContent = `
        // ‚úÖ AQU√ç VAN LAS INSTRUCCIONES DEL PROMPT ‚úÖ
        
        Tu nombre es Nova-AI, y eres un Asistente virtual inteligente para la instituci√≥n financiera Nova.
        
        DIRECTRICES GENERALES:
        - Responde √∫nicamente en espa√±ol
        - Si te dan las gracias, responde que es un gusto ayudar y si hay algo m√°s en lo que puedas asistirlos
        - Utiliza el historial de la conversaci√≥n como referencia
        - Utiliza s√≥lo la informaci√≥n de referencia brindada
        - Si tu respuesta incluye algo que no se encuentre en la informaci√≥n de referencia brindada, a√±ade en negritas 'Esta informaci√≥n no proviene de los documentos internos de Nova'
        - No respondas preguntas que no sean de Nova y sus servicios financieros
        - Nunca te disculpes por confusiones en la conversaci√≥n
        - Si no conoces la respuesta menciona que no cuentas con esa informaci√≥n
        - Utiliza de manera preferente la informaci√≥n de referencia con m√°s exactitud y apego a la pregunta
        - Responde con mucho detalle, busca hacer listados y presentar la informaci√≥n de una manera √∫til y accesible
        - Siempre que puedas haz listados para organizar tu respuesta, usando bullets, negritas, dando respuestas largas y estructuradas

        ALCANCE DE CONOCIMIENTOS:
        Si te preguntan acerca de tu alcance, informaci√≥n que conoces, qu√© sabes hacer o tu base de conocimientos, responde que conoces los servicios financieros de Nova as√≠ como los procedimientos principales.

        Algunos ejemplos de la informaci√≥n que conoces son: consultas de saldos, procedimientos de retiro de ahorros, transferencias entre tipos de ahorro, tasas de inter√©s para ahorros y pr√©stamos, gesti√≥n de cuotas de ahorro, tipos de ahorro disponibles, horarios de operaciones, tipos de pr√©stamos disponibles, lineamientos para pr√©stamos, procedimientos para solicitar pr√©stamos, pr√©stamos hipotecarios, pagos de pr√©stamos, gu√≠as de uso de APP y portal web, recuperaci√≥n de facturas en garant√≠a, liberaci√≥n de hipotecas, pr√©stamos con garant√≠a de inversi√≥n, documentaci√≥n de APIs y endpoints, entre muchos otros servicios financieros.

üî∑ **Contexto del Usuario:**
${userContext}

üî∑ **Fecha y Hora Actual:**
${fechaActual.toFormat('dd/MM/yyyy HH:mm:ss')} (${fechaActual.zoneName})

üî∑ **Historial de Conversaci√≥n:**
${historial.length > 0 ? 
  `Tienes acceso a los √∫ltimos ${historial.length} mensajes de esta conversaci√≥n.` : 
  'Esta es una conversaci√≥n nueva.'
}

üî∑ **Tus Capacidades (Azure OpenAI + Document Search):**
‚Ä¢ Conversaci√≥n natural e inteligente con memoria contextual
‚Ä¢ B√∫squeda autom√°tica en documentos internos de Nova
‚Ä¢ Consulta de saldos del usuario autenticado
‚Ä¢ Consulta de tasas de inter√©s de Nova (herramienta especializada)
‚Ä¢ Informaci√≥n del usuario autenticado
‚Ä¢ Consultas a APIs internas de Nova
‚Ä¢ An√°lisis y explicaciones detalladas
‚Ä¢ Generaci√≥n de res√∫menes de conversaci√≥n
‚Ä¢ Documentaci√≥n t√©cnica de APIs y procedimientos

üî∑ **Personalidad:**
‚Ä¢ Profesional pero amigable
‚Ä¢ √ötil y proactivo para temas financieros y corporativos
‚Ä¢ Claro y conciso en respuestas
‚Ä¢ Usa la memoria de conversaci√≥n para dar respuestas m√°s contextuales
‚Ä¢ Enfocado en productividad corporativa y servicios financieros
‚Ä¢ Experto en documentaci√≥n t√©cnica de Nova

üî∑ **Importante:**
‚Ä¢ Siempre mant√©n la informaci√≥n del usuario segura
‚Ä¢ Para consultas de saldos, usa la herramienta especializada
‚Ä¢ Para consultas de tasas, usa la herramienta especializada
‚Ä¢ Para preguntas sobre documentaci√≥n t√©cnica, usa la informaci√≥n de documentos encontrada
‚Ä¢ Usa el historial de conversaci√≥n para dar respuestas m√°s personalizadas
‚Ä¢ Si el usuario se refiere a algo anterior, busca en el historial proporcionado`
        const mensajes = [
            { role: 'system', content: systemContent }
        ];
        // ‚úÖ Procesar historial tradicional
        if (historial && historial.length > 0) {
            console.log(`üìö Formateando ${historial.length} mensajes del historial tradicional...`);
            
            historial.forEach((item, index) => {
                if (item.content && item.content.trim()) {
                    mensajes.push({
                        role: item.role,
                        content: item.content.trim()
                    });
                    console.log(`   ${index + 1}. ${item.role}: ${item.content.substring(0, 30)}...`);
                }
            });
        }

        return mensajes;
    }

    /**
     * ‚úÖ Procesamiento de herramientas con Azure OpenAI
     */
    async procesarHerramientas(messageResponse, mensajes, userToken, userInfo, conversationId) {
        const resultados = [];

        for (const call of messageResponse.tool_calls) {
            const { function: fnCall, id } = call;
            const { name, arguments: args } = fnCall;
            
            try {
                console.log(`üîß [${userInfo?.usuario || 'unknown'}] Ejecutando herramienta: ${name}`);
                
                const parametros = JSON.parse(args || '{}');
                const resultado = await this.ejecutarHerramienta(
                    name, 
                    parametros, 
                    userToken, 
                    userInfo, 
                    conversationId
                );
                
                resultados.push({
                    tool_call_id: id,
                    content: typeof resultado === 'object' ? 
                        JSON.stringify(resultado, null, 2) : String(resultado)
                });
                
                console.log(`‚úÖ [${userInfo?.usuario || 'unknown'}] Herramienta ${name} ejecutada exitosamente`);
                
            } catch (error) {
                console.error(`‚ùå Error ejecutando herramienta ${name}:`, error);
                resultados.push({
                    tool_call_id: id,
                    content: `Error ejecutando ${name}: ${error.message}`
                });
            }
        }

        // ‚úÖ Generar respuesta final con Azure OpenAI
        const finalMessages = [
            ...mensajes,
            messageResponse,
            ...resultados.map(result => ({
                role: "tool",
                tool_call_id: result.tool_call_id,
                content: result.content
            }))
        ];

        console.log(`üîÑ [${userInfo?.usuario || 'unknown'}] Generando respuesta final con resultados de herramientas...`);
        
        const finalResponse = await this.openai.chat.completions.create({
            model: this.deploymentName, // Usar deployment name
            messages: finalMessages,
            temperature: 1.0,
            max_completion_tokens: 3000
        });

        return {
            type: 'text',
            content: finalResponse.choices[0].message.content || 'No se pudo generar respuesta final'
        };
    }

    /**
     * ‚úÖ MEJORADO: Ejecutar herramientas con nueva funcionalidad de saldos
     */
    async ejecutarHerramienta(nombre, parametros, userToken, userInfo, conversationId) {
        const userId = userInfo?.usuario || 'unknown';
        console.log(`üîß [${userId}] Ejecutando herramienta: ${nombre}`);
        console.log(`üìã [${userId}] Par√°metros:`, parametros);

        switch (nombre) {
            case 'obtener_fecha_hora_actual':
                return this.obtenerFechaHora(parametros.formato || 'completo');

            case 'obtener_informacion_usuario':
                return this.obtenerInfoUsuario(userInfo, parametros.incluir_token);

            case 'consultar_tasas_interes':
                console.log(`üí∞ [${userId}] Consultando tasas para a√±o: ${parametros.anio}`);
                return await this.consultarTasasInteres(parametros.anio, userToken, userInfo);

            // ‚úÖ NUEVA HERRAMIENTA: Consultar saldo del usuario
            case 'consultar_saldo_usuario':
                console.log(`üí≥ [${userId}] Consultando saldo del usuario`);
                return await this.consultarSaldoUsuario(
                    userToken, 
                    userInfo, 
                    parametros.tipo_sistema || "",
                    parametros.incluir_detalles !== false
                );

            case 'generar_resumen_conversacion':
                console.log(`üìä [${userId}] Generando resumen de conversaci√≥n`);
                return await this.generarResumenConversacion(
                    conversationId, 
                    userInfo, 
                    parametros.incluir_estadisticas,
                    parametros.usar_formato_openai
                );

            case 'consultar_api_nova':
                console.log(`üåê [${userId}] Consultando API Nova: ${parametros.endpoint}`);
                return await this.consultarApiNova(
                    parametros.endpoint, 
                    userToken, 
                    parametros.metodo || 'GET',
                    parametros.parametros
                );

            case 'analizar_conversacion_openai':
                console.log(`üîç [${userId}] Analizando conversaci√≥n OpenAI: ${parametros.tipo_analisis}`);
                return await this.analizarConversacionOpenAI(
                    conversationId,
                    userInfo,
                    parametros.tipo_analisis,
                    parametros.incluir_sistema
                );

            case 'buscar_documentos_nova':
                return await documentService.buscarDocumentos(parametros.consulta, parametros.tipo_busqueda || 'general');
            default:
                throw new Error(`Herramienta desconocida: ${nombre}`);
        }
    }

    /**
     * ‚úÖ NUEVA HERRAMIENTA: Consultar saldo del usuario
     */
    async consultarSaldoUsuario(userToken, userInfo, tipoSist = "", incluirDetalles = true) {
        try {
            if (!userToken || !userInfo) {
                return "‚ùå **Error**: Usuario no autenticado para consultar saldo";
            }

            const cveUsuario = userInfo.usuario;
            console.log(`üí≥ [${cveUsuario}] Consultando saldo del usuario...`);

            const requestBody = {
                usuarioActual: {
                    CveUsuario: cveUsuario
                },
                data: {
                    NumSocio: cveUsuario,
                    TipoSist: tipoSist
                }
            };

            console.log('üì° Request body para saldo:', JSON.stringify(requestBody, null, 2));
            const url = process.env.NOVA_API_URL_SALDO || 'https://pruebas.nova.com.mx/ApiRestNova/api/ConsultaSaldo/ObtSaldo';
            
            const response = await axios.post(
                url,
                requestBody,
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${userToken}`,
                        'Accept': 'application/json'
                    },
                    timeout: 15000
                }
            );

            console.log(`üìä Respuesta saldo (${response.status}):`, JSON.stringify(response.data, null, 2));

            if (response.status === 200 && response.data) {
                return this.formatearSaldoUsuario(response.data, userInfo, incluirDetalles);
            } else {
                return `‚ö†Ô∏è **Respuesta inesperada al consultar saldo**: Status ${response.status}`;
            }

        } catch (error) {
            console.error('‚ùå Error consultando saldo del usuario:', error.message);
            
            if (error.response?.status === 401) {
                return "üîí **Error de autorizaci√≥n**: Tu token puede haber expirado. Intenta cerrar sesi√≥n e iniciar nuevamente.";
            } else if (error.response?.status === 404) {
                return "‚ùå **Servicio no encontrado**: El servicio de consulta de saldos no est√° disponible.";
            } else if (error.response?.status === 400) {
                return `‚ùå **Datos inv√°lidos**: Error en los par√°metros de consulta.`;
            } else {
                return `‚ùå **Error consultando saldo**: ${error.message}`;
            }
        }
    }

    /**
     * ‚úÖ NUEVO: Formatear informaci√≥n de saldo del usuario
     */
    formatearSaldoUsuario(saldoData, userInfo, incluirDetalles = true) {
        try {
            const hoyMX = new Date().toLocaleDateString('es-MX');
            const horaMX = new Date().toLocaleTimeString('es-MX');

            let resultado = `üí≥ **CONSULTA DE SALDO - NOVA CORPORATION**\n\n`;
            resultado += `üë§ **Usuario**: ${userInfo.nombre || userInfo.usuario}\n`;
            resultado += `üÜî **N√∫mero de Socio**: ${userInfo.usuario}\n`;
            resultado += `üìÖ **Consulta**: ${hoyMX} ${horaMX}\n\n`;

            // ‚úÖ Verificar si hay datos de saldo
            if (!saldoData || (!saldoData.info && !saldoData.data && !saldoData.saldos)) {
                resultado += `‚ö†Ô∏è **Sin informaci√≥n de saldo disponible**\n`;
                resultado += `Esto puede suceder por:\n`;
                resultado += `‚Ä¢ No tienes cuentas de ahorro activas\n`;
                resultado += `‚Ä¢ El sistema est√° en mantenimiento\n`;
                resultado += `‚Ä¢ Error temporal en la consulta\n\n`;
                resultado += `üí° Intenta consultar nuevamente en unos minutos o contacta a soporte.`;
                return resultado;
            }

            // ‚úÖ Procesar datos de saldo (adaptable a diferentes estructuras de respuesta)
            let saldos = [];
            
            if (saldoData.info && Array.isArray(saldoData.info)) {
                saldos = saldoData.info;
            } else if (saldoData.data && Array.isArray(saldoData.data)) {
                saldos = saldoData.data;
            } else if (saldoData.saldos && Array.isArray(saldoData.saldos)) {
                saldos = saldoData.saldos;
            } else if (Array.isArray(saldoData)) {
                saldos = saldoData;
            }

            if (saldos.length === 0) {
                resultado += `‚ö†Ô∏è **No se encontraron cuentas de ahorro**\n`;
                resultado += `‚Ä¢ Verifica que tengas productos de ahorro activos en Nova\n`;
                resultado += `‚Ä¢ Si acabas de abrir una cuenta, puede tardar unos minutos en aparecer`;
                return resultado;
            }

            // ‚úÖ Calcular totales
            let totalDisponible = 0;
            let totalRetenido = 0;
            let totalGeneral = 0;

            saldos.forEach(cuenta => {
                const disponible = parseFloat(cuenta.saldoDisponible || cuenta.disponible || cuenta.SaldoDisponible || 0);
                const retenido = parseFloat(cuenta.saldoRetenido || cuenta.retenido || cuenta.SaldoRetenido || 0);
                
                totalDisponible += disponible;
                totalRetenido += retenido;
                totalGeneral += disponible + retenido;
            });

            // ‚úÖ Resumen de saldos
            resultado += `üìä **RESUMEN DE SALDOS**\n`;
            resultado += `üí∞ **Total Disponible**: $${totalDisponible.toLocaleString('es-MX', {minimumFractionDigits: 2})}\n`;
            resultado += `üîí **Total Retenido**: $${totalRetenido.toLocaleString('es-MX', {minimumFractionDigits: 2})}\n`;
            resultado += `üíé **Total General**: $${totalGeneral.toLocaleString('es-MX', {minimumFractionDigits: 2})}\n\n`;

            // ‚úÖ Detalle por cuenta (si se solicita)
            if (incluirDetalles && saldos.length > 0) {
                resultado += `üìã **DETALLE POR CUENTA**\n\n`;

                saldos.forEach((cuenta, index) => {
                    const tipoCuenta = cuenta.tipoCuenta || cuenta.tipo || cuenta.TipoCuenta || `Cuenta ${index + 1}`;
                    const disponible = parseFloat(cuenta.saldoDisponible || cuenta.disponible || cuenta.SaldoDisponible || 0);
                    const retenido = parseFloat(cuenta.saldoRetenido || cuenta.retenido || cuenta.SaldoRetenido || 0);
                    const total = disponible + retenido;

                    resultado += `üè¶ **${tipoCuenta}**\n`;
                    resultado += `   üí∞ Disponible: $${disponible.toLocaleString('es-MX', {minimumFractionDigits: 2})}\n`;
                    resultado += `   üîí Retenido: $${retenido.toLocaleString('es-MX', {minimumFractionDigits: 2})}\n`;
                    resultado += `   üíé Total: $${total.toLocaleString('es-MX', {minimumFractionDigits: 2})}\n`;

                    // Informaci√≥n adicional si est√° disponible
                    if (cuenta.numeroCuenta || cuenta.numero || cuenta.NumeroCuenta) {
                        resultado += `   üî¢ N√∫mero: ${cuenta.numeroCuenta || cuenta.numero || cuenta.NumeroCuenta}\n`;
                    }
                    if (cuenta.fechaUltimoMovimiento || cuenta.ultimoMovimiento) {
                        resultado += `   üìÖ √öltimo mov.: ${cuenta.fechaUltimoMovimiento || cuenta.ultimoMovimiento}\n`;
                    }

                    resultado += `\n`;
                });
            }

            // ‚úÖ Informaci√≥n adicional
            resultado += `üí° **Informaci√≥n Importante**\n`;
            resultado += `‚Ä¢ **Saldo Disponible**: Dinero que puedes retirar inmediatamente\n`;
            resultado += `‚Ä¢ **Saldo Retenido**: Fondos en proceso o con restricciones temporales\n`;
            resultado += `‚Ä¢ Los saldos se actualizan en tiempo real durante horario bancario\n`;
            resultado += `‚Ä¢ Para movimientos, consulta el historial en tu app Nova\n\n`;
            resultado += `üïê **Horarios de disposici√≥n**: Lunes a viernes 8:00 - 18:00 hrs`;

            return resultado;

        } catch (error) {
            console.error('‚ùå Error formateando saldo:', error);
            return `‚ùå **Error formateando informaci√≥n de saldo**: ${error.message}`;
        }
    }

    /**
     * ‚úÖ NUEVA HERRAMIENTA: Analizar conversaci√≥n en formato OpenAI
     */
    async analizarConversacionOpenAI(conversationId, userInfo, tipoAnalisis, incluirSistema = true) {
        try {
            if (!cosmosService.isAvailable() || !conversationId) {
                return "‚ùå **Error**: An√°lisis no disponible. Se requiere Cosmos DB y conversaci√≥n activa.";
            }

            const userId = userInfo?.usuario || 'unknown';
            console.log(`üîç [${userId}] Iniciando an√°lisis de conversaci√≥n: ${tipoAnalisis}`);

            // Obtener conversaci√≥n en formato OpenAI
            const conversacion = await cosmosService.getConversationForOpenAI(
                conversationId,
                userId,
                incluirSistema
            );

            if (!conversacion || conversacion.length === 0) {
                return "‚ùå **No hay conversaci√≥n en formato OpenAI para analizar**\n\nLa conversaci√≥n debe tener mensajes guardados en formato OpenAI.";
            }

            console.log(`üìä [${userId}] Analizando ${conversacion.length} mensajes (tipo: ${tipoAnalisis})`);

            // Crear prompt espec√≠fico para el tipo de an√°lisis
            const promptAnalisis = this.crearPromptAnalisis(tipoAnalisis, conversacion, userInfo);

            // Usar OpenAI para analizar la conversaci√≥n
            const analisisResponse = await this.openai.chat.completions.create({
                model: "gpt-5-mini",
                messages: [
                    {
                        role: "system",
                        content: "Eres un analista experto en conversaciones corporativas. Proporciona an√°lisis precisos, estructurados y √∫tiles."
                    },
                    {
                        role: "user",
                        content: promptAnalisis
                    }
                ],
                temperature: 0.3,
                max_completion_tokens: 2000
            });

            const analisis = analisisResponse.choices[0].message.content;

            // Formatear resultado
            let resultado = `üîç **An√°lisis de Conversaci√≥n: ${tipoAnalisis.toUpperCase()}**\n\n`;
            resultado += `üë§ **Usuario**: ${userInfo?.nombre || 'Usuario'} (${userId})\n`;
            resultado += `üìä **Mensajes analizados**: ${conversacion.length}\n`;
            resultado += `ü§ñ **Formato**: OpenAI Chat API\n`;
            resultado += `üìÖ **An√°lisis generado**: ${new Date().toLocaleString('es-MX')}\n\n`;
            resultado += `**Resultado del an√°lisis:**\n\n${analisis}`;

            return resultado;

        } catch (error) {
            console.error(`‚ùå Error en an√°lisis de conversaci√≥n:`, error);
            return `‚ùå **Error en an√°lisis**: ${error.message}`;
        }
    }

    /**
     * ‚úÖ NUEVO: Crear prompt espec√≠fico para cada tipo de an√°lisis
     */
    crearPromptAnalisis(tipoAnalisis, conversacion, userInfo) {
        const conversacionTexto = JSON.stringify(conversacion, null, 2);
        
        const prompts = {
            resumen: `Analiza la siguiente conversaci√≥n y proporciona un resumen ejecutivo:

${conversacionTexto}

Proporciona:
1. Resumen de los temas principales discutidos
2. Conclusiones o decisiones alcanzadas
3. Acciones pendientes o recomendaciones
4. Puntos clave destacados

Formato: Profesional y estructurado para uso corporativo.`,

            sentimientos: `Analiza el tono y sentimientos en esta conversaci√≥n corporativa:

${conversacionTexto}

Eval√∫a:
1. Tono general de la conversaci√≥n (profesional, amigable, formal, etc.)
2. Nivel de satisfacci√≥n del usuario
3. Puntos de fricci√≥n o confusi√≥n
4. Momentos de mayor engagement
5. Recomendaciones para mejorar la experiencia

Enfoque: An√°lisis objetivo para mejorar el servicio al cliente.`,

            temas: `Identifica y categoriza los temas tratados en esta conversaci√≥n:

${conversacionTexto}

Identifica:
1. Temas principales (categor√≠as de productos/servicios)
2. Subtemas espec√≠ficos
3. Frecuencia de cada tema
4. Temas relacionados entre s√≠
5. Temas que requieren seguimiento

Organiza por relevancia e importancia para Nova Corporation.`,

            patrones: `Analiza patrones de comunicaci√≥n en esta conversaci√≥n:

${conversacionTexto}

Busca:
1. Patrones en las preguntas del usuario
2. Efectividad de las respuestas del asistente
3. Flujo de la conversaci√≥n
4. Puntos donde se requiri√≥ clarificaci√≥n
5. Oportunidades de optimizaci√≥n

Objetivo: Mejorar la calidad del servicio automatizado.`,

            recomendaciones: `Bas√°ndote en esta conversaci√≥n, proporciona recomendaciones estrat√©gicas:

${conversacionTexto}

Usuario: ${userInfo?.nombre || 'Cliente'} (${userInfo?.usuario || 'N/A'})

Proporciona:
1. Recomendaciones de productos/servicios Nova relevantes
2. Acciones de seguimiento recomendadas
3. Oportunidades de venta cruzada
4. Mejoras en el proceso de atenci√≥n
5. Personalizaci√≥n futura para este usuario

Enfoque: Estrat√©gico y orientado a resultados comerciales.`
        };

        return prompts[tipoAnalisis] || prompts.resumen;
    }

    /**
     * ‚úÖ MEJORADO: Generar resumen con opci√≥n de formato OpenAI
     */
    async generarResumenConversacion(conversationId, userInfo, incluirEstadisticas = true, usarFormatoOpenAI = true) {
        try {
            if (!conversationId || !userInfo) {
                return "‚ö†Ô∏è No hay informaci√≥n de conversaci√≥n disponible para generar resumen";
            }

            const userId = userInfo?.usuario || 'unknown';
            let resumen = `üìä **Resumen de Conversaci√≥n**\n\n`;
            resumen += `üë§ **Usuario**: ${userInfo.nombre} (${userInfo.usuario})\n`;
            resumen += `üìÖ **Fecha**: ${DateTime.now().setZone('America/Mexico_City').toFormat('dd/MM/yyyy HH:mm')}\n`;

            // ‚úÖ INTENTAR: Usar formato OpenAI si est√° disponible y solicitado
            if (usarFormatoOpenAI && cosmosService.isAvailable()) {
                try {
                    console.log(`ü§ñ [${userId}] Generando resumen usando formato OpenAI...`);
                    
                    const conversacionOpenAI = await cosmosService.getConversationMessages(conversationId, userId);
                    
                    if (conversacionOpenAI && conversacionOpenAI.length > 0) {
                        resumen += `ü§ñ **Formato**: OpenAI Chat API (${conversacionOpenAI.length} mensajes)\n`;
                        
                        if (incluirEstadisticas) {
                            const stats = this.calcularEstadisticasConversacion(conversacionOpenAI);
                            resumen += `üìä **Estad√≠sticas**:\n`;
                            resumen += `   ‚Ä¢ Mensajes del sistema: ${stats.system}\n`;
                            resumen += `   ‚Ä¢ Mensajes del usuario: ${stats.user}\n`;
                            resumen += `   ‚Ä¢ Respuestas del asistente: ${stats.assistant}\n`;
                            resumen += `   ‚Ä¢ Promedio palabras por mensaje: ${stats.avgWords}\n`;
                        }
                        
                        // Usar IA para generar resumen inteligente
                        const resumenIA = await this.analizarConversacionOpenAI(
                            conversationId,
                            userInfo,
                            'resumen',
                            false // sin mensaje del sistema para el resumen
                        );
                        
                        resumen += `\n**Resumen inteligente**:\n${resumenIA}`;
                        
                        return resumen;
                    }
                } catch (openaiError) {
                    console.warn(`‚ö†Ô∏è [${userId}] Error usando formato OpenAI para resumen:`, openaiError.message);
                }
            }

            // ‚úÖ FALLBACK: Resumen b√°sico
            if (incluirEstadisticas) {
                resumen += `üíæ **Persistencia**: ${cosmosService.isAvailable() ? 'Cosmos DB' : 'Solo memoria'}\n`;
                resumen += `ü§ñ **IA**: OpenAI gpt-5-mini\n`;
            }
            
            resumen += `\nüí° **Para ver el historial completo**:\n`;
            resumen += `‚Ä¢ Escribe \`historial\` - Ver √∫ltimos 5 mensajes\n`;
            resumen += `‚Ä¢ El resumen detallado se genera autom√°ticamente por TeamsBot\n`;

            return resumen;

        } catch (error) {
            console.error('Error generando resumen:', error);
            return `‚ùå Error generando resumen: ${error.message}`;
        }
    }

    /**
     * ‚úÖ NUEVO: Calcular estad√≠sticas de conversaci√≥n en formato OpenAI
     */
    calcularEstadisticasConversacion(conversacion) {
        const stats = {
            system: 0,
            user: 0,
            assistant: 0,
            totalWords: 0,
            avgWords: 0
        };

        conversacion.forEach(msg => {
            stats[msg.role]++;
            const words = msg.content.split(' ').length;
            stats.totalWords += words;
        });

        stats.avgWords = Math.round(stats.totalWords / conversacion.length);

        return stats;
    }

    /**
     * ‚úÖ Obtiene fecha y hora actual
     */
    obtenerFechaHora(formato = 'completo') {
        const ahora = DateTime.now().setZone('America/Mexico_City');
        
        switch (formato) {
            case 'fecha':
                return ahora.toFormat('dd/MM/yyyy');
            case 'hora':
                return ahora.toFormat('HH:mm:ss');
            case 'timestamp':
                return ahora.toISO();
            case 'completo':
            default:
                return {
                    fecha: ahora.toFormat('dd/MM/yyyy'),
                    hora: ahora.toFormat('HH:mm:ss'),
                    timezone: ahora.zoneName,
                    diaSemana: ahora.toFormat('cccc'),
                    timestamp: ahora.toISO(),
                    formato_humano: ahora.toFormat('dd/MM/yyyy HH:mm:ss')
                };
        }
    }

    /**
     * ‚úÖ Obtiene informaci√≥n del usuario
     */
    obtenerInfoUsuario(userInfo, incluirToken = false) {
        if (!userInfo) {
            return 'No hay informaci√≥n de usuario disponible';
        }

        let info = `üë§ **Informaci√≥n del Usuario:**\n\n`;
        info += `üìù **Nombre**: ${userInfo.nombre}\n`;
        info += `üë§ **Usuario**: ${userInfo.usuario}\n`;
        info += `üè¢ **Apellido Paterno**: ${userInfo.paterno || 'N/A'}\n`;
        info += `üè¢ **Apellido Materno**: ${userInfo.materno || 'N/A'}\n`;

        if (incluirToken && userInfo.token) {
            info += `üîë **Token**: ${userInfo.token.substring(0, 50)}...\n`;
            info += `üìä **Token v√°lido**: ${userInfo.token.length > 100 ? 'S√≠' : 'Posiblemente no'}\n`;
        }

        info += `\nüí° Esta informaci√≥n se extrae del token de autenticaci√≥n de Nova.`;

        return info;
    }

    /**
     * ‚úÖ Consulta tasas de inter√©s de Nova
     */
    async consultarTasasInteres(anio, userToken, userInfo) {
        try {
            if (!userToken || !userInfo) {
                return "‚ùå **Error**: Usuario no autenticado para consultar tasas";
            }

            const cveUsuario = userInfo.usuario;
            const numRI = this.extractNumRIFromToken(userToken) || "7";

            console.log(`üí∞ [${cveUsuario}] Consultando tasas para a√±o ${anio}`);

            const requestBody = {
                usuarioActual: {
                    CveUsuario: cveUsuario
                },
                data: {
                    NumRI: numRI,
                    Anio: anio
                }
            };

            console.log('üì° Request body para tasas:', JSON.stringify(requestBody, null, 2));
            const url = process.env.NOVA_API_URL_TASA || 'https://pruebas.nova.com.mx/ApiRestNova/api/ConsultaTasa/consultaTasa';
            
            const response = await axios.post(
                url,
                requestBody,
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${userToken}`,
                        'Accept': 'application/json'
                    },
                    timeout: 15000
                }
            );

            console.log(`üìä Respuesta tasas (${response.status}):`, JSON.stringify(response.data, null, 2));

            if (response.status === 200 && response.data?.info) {
                return this.formatearTablaTasas(response.data.info, anio, cveUsuario);
            } else {
                return `‚ö†Ô∏è **Respuesta inesperada al consultar tasas**: Status ${response.status}`;
            }

        } catch (error) {
            console.error('‚ùå Error consultando tasas de inter√©s:', error.message);
            
            if (error.response?.status === 401) {
                return "üîí **Error de autorizaci√≥n**: Tu token puede haber expirado. Intenta cerrar sesi√≥n e iniciar nuevamente.";
            } else if (error.response?.status === 404) {
                return "‚ùå **Servicio no encontrado**: El servicio de consulta de tasas no est√° disponible.";
            } else if (error.response?.status === 400) {
                return `‚ùå **Datos inv√°lidos**: Verifica que el a√±o ${anio} sea v√°lido.`;
            } else {
                return `‚ùå **Error consultando tasas**: ${error.message}`;
            }
        }
    }

    /**
     * ‚úÖ Extrae NumRI del token JWT
     */
    extractNumRIFromToken(token) {
        try {
            if (!token) {
                console.warn('Token vac√≠o para extraer NumRI');
                return null;
            }

            // Limpiar token
            const cleanToken = token.replace(/^Bearer\s+/, '');
            
            // Separar partes del JWT
            const parts = cleanToken.split('.');
            if (parts.length !== 3) {
                console.warn('Token no tiene formato JWT v√°lido');
                return null;
            }

            // Decodificar payload
            const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());
            console.log('üîç Payload del token:', Object.keys(payload));

            // Buscar NumRI en diferentes posibles ubicaciones
            const possibleKeys = [
                'NumRI',
                'numRI', 
                'numri',
                'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier',
                'sub',
                'user_id',
                'employee_id'
            ];

            for (const key of possibleKeys) {
                if (payload[key]) {
                    const numRI = parseInt(payload[key]);
                    if (!isNaN(numRI)) {
                        console.log(`‚úÖ NumRI encontrado en '${key}': ${numRI}`);
                        return numRI;
                    }
                }
            }

            // Si no se encuentra, intentar con el usuario
            const cveUsuario = payload['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'] || payload.name || payload.preferred_username;
            if (cveUsuario) {
                const numRI = parseInt(cveUsuario);
                if (!isNaN(numRI)) {
                    console.log(`‚úÖ NumRI extra√≠do del usuario: ${numRI}`);
                    return numRI;
                }
            }

            console.warn('‚ö†Ô∏è No se pudo extraer NumRI del token');
            console.log('üìã Campos disponibles en payload:', Object.keys(payload));
            return null;

        } catch (error) {
            console.error('‚ùå Error extrayendo NumRI del token:', error.message);
            return null;
        }
    }

    /**
     * ‚úÖ Formatea tabla de tasas de inter√©s
     */
    formatearTablaTasas(tasasData, anio, usuario) {
    try {
        if (!tasasData || !Array.isArray(tasasData) || tasasData.length === 0) {
            return "‚ùå **Error**: Datos de tasas inv√°lidos o vac√≠os";
        }

        const hoyMX = new Date().toLocaleDateString('es-MX');

        // Normaliza texto y ordena meses Ene..Dic (tolera acentos/casos)
        const norm = (s) => (s ?? '').toString().toLowerCase()
            .normalize('NFD').replace(/[\u0300-\u036f]/g, '').trim();
        const monthIdx = {
            'enero':1,'febrero':2,'marzo':3,'abril':4,'mayo':5,'junio':6,
            'julio':7,'agosto':8,'septiembre':9,'setiembre':9,'octubre':10,'noviembre':11,'diciembre':12
        };

        const pct = (v) => {
            if (v === undefined || v === null || v === '') return '‚Äî';
            const n = Number(v);
            return Number.isFinite(n) ? `${n}%` : String(v);
        };

        // Ordenar por mes
        const filas = [...tasasData].sort((a, b) => {
            const ai = monthIdx[norm(a.Mes)] ?? 99;
            const bi = monthIdx[norm(b.Mes)] ?? 99;
            return ai - bi;
        }).map(m => ({
            Mes: (m.Mes || '').toString(),
            Vista: pct(m.vista),
            Fijo1m: pct(m.fijo1),
            Fijo3m: pct(m.fijo3),
            Fijo6m: pct(m.fijo6),
            FAP: pct(m.FAP),
            Nov: pct(m.Nov),
            Prestamos: pct(m.Prestamos)
        }));

        // Calcular anchos de columnas para tabla monoespaciada
        const headers = ['Mes','Vista','Fijo 1m','Fijo 3m','Fijo 6m','FAP','Nov','Pr√©stamos'];
        const allRows = [headers, ...filas.map(f => [
            f.Mes, f.Vista, f.Fijo1m, f.Fijo3m, f.Fijo6m, f.FAP, f.Nov, f.Prestamos
        ])];

        const widths = headers.map((_, col) =>
            Math.max(...allRows.map(r => (r[col] ?? '').toString().length))
        );

        const pad = (txt, i) => (txt ?? '').toString().padEnd(widths[i], ' ');
        const sep = ' | ';

        const headerLine = headers.map((h, i) => pad(h, i)).join(sep);
        const divider = widths.map(w => ''.padEnd(w, '‚îÄ')).join('‚îÄ‚îº‚îÄ');

        const bodyLines = filas.map(r =>
            [r.Mes, r.Vista, r.Fijo1m, r.Fijo3m, r.Fijo6m, r.FAP, r.Nov, r.Prestamos]
            .map((c, i) => pad(c, i)).join(sep)
        );

        let out = `üí∞ **TASAS DE INTER√âS NOVA CORPORATION ${anio}**\n\n`;
        out += `üë§ **Usuario**: ${usuario}   üìÖ **A√±o**: ${anio}   üïê **Actualizado**: ${hoyMX}\n\n`;
        out += `üìä **Detalle mes por mes**\n`;
        out += '```text\n';
        out += headerLine + '\n';
        out += divider + '\n';
        out += bodyLines.join('\n') + '\n';
        out += '```\n';
        out += `\nLeyenda: **‚Äî** sin dato.\n`;

        return out;

    } catch (error) {
        console.error('‚ùå Error formateando tabla de tasas:', error);
        return `‚ùå **Error formateando tasas**: ${error.message}`;
    }
}

    /**
     * ‚úÖ Consulta API Nova gen√©rica
     */
    async consultarApiNova(endpoint, userToken, metodo = 'GET', parametros = {}) {
        try {
            if (!userToken) {
                return '‚ùå Token de usuario requerido para consultar API Nova';
            }

            const baseUrl = 'https://pruebas.nova.com.mx/ApiRestNova/api';
            const url = endpoint.startsWith('http') ? endpoint : `${baseUrl}/${endpoint.replace(/^\//, '')}`;

            console.log(`üåê Consultando API Nova: ${metodo} ${url}`);

            const config = {
                method: metodo,
                url: url,
                headers: {
                    'Authorization': `Bearer ${userToken}`,
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                timeout: 15000
            };

            if (metodo === 'POST' && parametros) {
                config.data = parametros;
            } else if (metodo === 'GET' && parametros) {
                config.params = parametros;
            }

            const response = await axios(config);

            if (response.status === 200) {
                return {
                    success: true,
                    data: response.data,
                    status: response.status,
                    message: 'Consulta exitosa'
                };
            } else {
                return {
                    success: false,
                    status: response.status,
                    message: `Respuesta inesperada: ${response.status}`
                };
            }

        } catch (error) {
            console.error('‚ùå Error consultando API Nova:', error.message);

            if (error.response) {
                return {
                    success: false,
                    status: error.response.status,
                    message: `Error ${error.response.status}: ${error.response.data?.message || 'Error del servidor'}`,
                    data: error.response.data
                };
            } else {
                return {
                    success: false,
                    message: `Error de conexi√≥n: ${error.message}`
                };
            }
        }
    }

    /**
     * ‚úÖ Crea respuesta cuando OpenAI no est√° disponible
     */
    createUnavailableResponse() {
        return {
            type: 'text',
            content: `ü§ñ **Servicio OpenAI no disponible**\n\n` +
                    `‚ùå **Error**: ${this.initializationError}\n\n` +
                    `üí° **Posibles soluciones**:\n` +
                    `‚Ä¢ Verificar configuraci√≥n de OPENAI_API_KEY\n` +
                    `‚Ä¢ Comprobar conectividad a internet\n` +
                    `‚Ä¢ Verificar cuota de OpenAI\n\n` +
                    `‚ö†Ô∏è **Nota**: Algunas funciones del bot est√°n limitadas sin OpenAI.`
        };
    }

    /**
     * ‚úÖ Maneja errores de OpenAI
     */
    manejarErrorOpenAI(error, userInfo) {
        const userId = userInfo?.usuario || 'unknown';
        console.error(`‚ùå [${userId}] Error OpenAI:`, error.message);

        let errorMessage = '‚ùå **Error del servicio OpenAI**\n\n';

        if (error.message.includes('insufficient_quota')) {
            errorMessage += 'üí≥ **Cuota agotada**: La cuota de OpenAI se ha agotado.';
        } else if (error.message.includes('rate_limit')) {
            errorMessage += '‚è∞ **L√≠mite de velocidad**: Demasiadas solicitudes. Intenta en unos momentos.';
        } else if (error.message.includes('invalid_api_key')) {
            errorMessage += 'üîë **API Key inv√°lida**: Problema de configuraci√≥n.';
        } else if (error.message.includes('model_not_found')) {
            errorMessage += 'ü§ñ **Modelo no encontrado**: El modelo solicitado no est√° disponible.';
        } else if (error.message.includes('timeout')) {
            errorMessage += '‚è∞ **Timeout**: El servidor tard√≥ demasiado en responder.';
        } else {
            errorMessage += `üîß **Error t√©cnico**: ${error.message}`;
        }

        errorMessage += '\n\nüí° Intenta nuevamente en unos momentos.';

        return {
            type: 'text',
            content: errorMessage
        };
    }

    selectBestModel(mensaje, userInfo) {
        const mensajeLower = mensaje.toLowerCase();
        
        // Para consultas complejas o t√©cnicas, usar GPT-4
        if (mensajeLower.includes('analizar') || 
            mensajeLower.includes('explicar') ||
            mensajeLower.includes('c√≥digo') ||
            mensajeLower.includes('programar') ||
            mensajeLower.includes('tasas') ||
            mensajeLower.includes('saldo') ||
            mensajeLower.includes('resumen') ||
            mensaje.length > 200) {
            return "gpt-5-mini";
        }
        
        // Para consultas simples, tambi√©n usar gpt-5-mini (es eficiente)
        return "gpt-5-mini";
    }

    calculateTemperature(mensaje) {
        const mensajeLower = mensaje.toLowerCase();
        
        // Temperatura baja para consultas t√©cnicas o de informaci√≥n
        if (mensajeLower.includes('qu√© es') || 
            mensajeLower.includes('c√≥mo') ||
            mensajeLower.includes('explicar') ||
            mensajeLower.includes('informaci√≥n') ||
            mensajeLower.includes('tasas') ||
            mensajeLower.includes('saldo') ||
            mensajeLower.includes('resumen')) {
            return 0.3;
        }
        
        // Temperatura alta para creatividad
        if (mensajeLower.includes('crear') ||
            mensajeLower.includes('escribe') ||
            mensajeLower.includes('idea')) {
            return 0.8;
        }
        
        // Temperatura media por defecto
        return 1.0;
    }

    calculateMaxTokens(mensaje) {
        if (mensaje.length > 500) return 4000;  // Consultas largas
        if (mensaje.length > 200) return 2000;  // Consultas medianas
        return 1500;  // Consultas cortas
    }

    shouldUseTools(mensaje) {
        const mensajeLower = mensaje.toLowerCase();
        
        const toolKeywords = [
            // Fecha y hora
            'fecha', 'hora', 'd√≠a', 'hoy', 'cuando', 'qu√© d√≠a',
            
            // Informaci√≥n personal
            'mi informaci√≥n', 'mis datos', 'perfil', 'mi info', 'quien soy',
            
            // ‚úÖ NUEVAS: Palabras clave para saldos
            'saldo', 'saldos', 'cu√°nto tengo', 'cuanto tengo', 'dinero',
            'cuenta', 'cuentas', 'disponible', 'retenido', 'balance',
            'mi dinero', 'mi saldo', 'consultar saldo', 'ver saldo',
            
            // Tasas de inter√©s - PALABRAS CLAVE ESPEC√çFICAS
            'tasas', 'tasa', 'interes', 'inter√©s', 'pr√©stamo', 'cr√©dito',
            'vista', 'fijo', 'fap', 'nov', 'dep√≥sito', 'dep√≥sitos',
            'ahorro', 'ahorros', 'inversi√≥n', 'rendimiento',
            
            // Res√∫menes y an√°lisis
            'resumen', 'resumir', 'an√°lisis', 'analizar',
            'reporte', 'informe',
            
            // An√°lisis de conversaci√≥n
            'analizar conversacion', 'analisis conversacion', 'patrones',
            'sentimientos', 'temas', 'recomendaciones',
            
            // APIs y consultas
            'consultar', 'api', 'buscar'
        ];
        
        const usarHerramientas = toolKeywords.some(keyword => mensajeLower.includes(keyword));
        
        if (usarHerramientas) {
            console.log(`üõ†Ô∏è Herramientas habilitadas para: "${mensaje.substring(0, 50)}..."`);
            console.log(`   Palabras clave detectadas: ${toolKeywords.filter(k => mensajeLower.includes(k)).join(', ')}`);
        }
        
        return usarHerramientas;
    }

    /**
     * ‚úÖ MEJORADO: Estad√≠sticas del servicio con informaci√≥n de saldos
     */
    getServiceStats() {
        return {
            initialized: this.initialized,
            available: this.openaiAvailable,
            error: this.initializationError,
            modelsAvailable: ['gpt-5-mini'],
            featuresEnabled: {
                basic_conversation: true,
                tools: true,
                conversation_history: true,
                user_context: true,
                saldo_consultation: true,              // ‚úÖ NUEVA
                tasas_interes: true,
                api_integration: true,
                openai_conversation_format: cosmosService.isAvailable(),
                conversation_analysis: cosmosService.isAvailable()
            },
            toolsCount: this.tools?.length || 0,
            conversationFormatSupport: {
                available: cosmosService.isAvailable(),
                analysisTypes: ['resumen', 'sentimientos', 'temas', 'patrones', 'recomendaciones'],
                intelligentSummary: true,
                statisticsCalculation: true
            },
            timestamp: new Date().toISOString(),
            version: '2.2.0-saldos-support'             // ‚úÖ NUEVA VERSI√ìN
        };
    }

    isAvailable() {
        return this.openaiAvailable && this.initialized;
    }

    /**
     * ‚úÖ NUEVO: M√©todo para procesar conversaci√≥n completa
     */
    async procesarConversacionCompleta(conversationId, userId, userInfo) {
        try {
            if (!cosmosService.isAvailable() || !conversationId) {
                return null;
            }

            console.log(`üîÑ [${userId}] Procesando conversaci√≥n completa...`);

            const conversacion = await cosmosService.getConversationForOpenAI(
                conversationId,
                userId,
                true
            );

            if (!conversacion || conversacion.length === 0) {
                return null;
            }

            return {
                messages: conversacion,
                stats: this.calcularEstadisticasConversacion(conversacion),
                readyForAPI: true,
                timestamp: new Date().toISOString()
            };

        } catch (error) {
            console.error(`‚ùå Error procesando conversaci√≥n completa:`, error);
            return null;
        }
    }

    cleanup() {
        console.log('üßπ Limpiando OpenAI Service...');
        console.log('‚úÖ OpenAI Service limpiado');
    }
}

// Crear instancia singleton
const openaiService = new AzureOpenAIService();

module.exports = openaiService;
